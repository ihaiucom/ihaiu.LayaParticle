var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Handler = Laya.Handler;
class AssetManager {
    // 加载资源
    load(path, complete, caller, type = Laya.Loader.TEXT) {
        Laya.loader.load(path, Handler.create(null, (res) => {
            if (complete) {
                if (caller) {
                    complete.apply(caller, [res]);
                }
                else {
                    complete(res);
                }
            }
        }), null, type);
    }
    // 加载资源, 异步
    loadAsync(path, type = Laya.Loader.TEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                this.load(path, (res) => {
                    resolve(res);
                }, null, type);
            });
        });
    }
    // 加载Shader
    loadShaderVSAsync(filename) {
        return __awaiter(this, void 0, void 0, function* () {
            let code = yield this.loadAsync(`res/shaders/${filename}.vs`, Laya.Loader.TEXT);
            return code.replace(/\r/g, "");
        });
    }
    // 加载Shader
    loadShaderPSAsync(filename) {
        return __awaiter(this, void 0, void 0, function* () {
            let code = yield this.loadAsync(`res/shaders/${filename}.fs`, Laya.Loader.TEXT);
            return code.replace(/\r/g, "");
        });
    }
}
exports.default = AssetManager;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AssetManager_1 = require("./AssetManager");
class Game {
}
// 资源
Game.asset = new AssetManager_1.default();
exports.default = Game;
},{"./AssetManager":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const GameUI_1 = require("./script/GameUI");
const GameControl_1 = require("./script/GameControl");
const Bullet_1 = require("./script/Bullet");
const DropBox_1 = require("./script/DropBox");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/GameControl.ts", GameControl_1.default);
        reg("script/Bullet.ts", Bullet_1.default);
        reg("script/DropBox.ts", DropBox_1.default);
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "AScebe.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{"./script/Bullet":15,"./script/DropBox":16,"./script/GameControl":17,"./script/GameUI":18}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
var Loader = Laya.Loader;
const Game_1 = require("./Game");
// import ParticleShader from "./particle/ParticleShader";
// import Particle2D from "./particle/Particle2D";
// import ParticleSetting from "./particle/ParticleSetting";
const ParticleShader_1 = require("./ihaiuparticle/ParticleShader");
const Particle2D_1 = require("./ihaiuparticle/Particle2D");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        // Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        // Laya.loader.load("res/particles/particleNew.part", Laya.Handler.create(this, this.onAssetsLoaded), null, Loader.JSON);
        // Laya.loader.load("res/particles/AAA.part", Laya.Handler.create(this, this.onAssetsLoaded), null, Loader.JSON);
        this.InitSync();
    }
    onAssetsLoaded(settings) {
        this.sp = new Particle2D_1.default(settings);
        this.sp.emitter.start();
        this.sp.play();
        Laya.stage.addChild(this.sp);
        this.sp.x = Laya.stage.width / 2;
        this.sp.y = Laya.stage.height / 2;
        window['pp'] = this.sp;
        this.sp.graphics.drawCircle(0, 0, 5, '#FF0000', '#00FF00', 5);
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
    }
    onMouseDown(e) {
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        this.sp.x = e.stageX;
        this.sp.y = e.stageY;
    }
    onMouseUp() {
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
    }
    onMouseMove(e) {
        this.sp.x = e.stageX;
        this.sp.y = e.stageY;
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
    InitSync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield ParticleShader_1.default.install();
            let settings = yield Game_1.default.asset.loadAsync("res/particles/AAA.part", Loader.JSON);
            this.onAssetsLoaded(settings);
        });
    }
}
//激活启动类
new Main();
},{"./Game":2,"./GameConfig":3,"./ihaiuparticle/Particle2D":7,"./ihaiuparticle/ParticleShader":10}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EmitterBase_1 = require("./EmitterBase");
const ParticleTemplate2D_1 = require("./ParticleTemplate2D");
class Emitter2D extends EmitterBase_1.default {
    constructor(_template) {
        super();
        this.setting = null;
        this._posRange = null;
        this._emitFun = null;
        this.template = _template;
    }
    /**
    *发射一个粒子
    *
    */
    emit() {
        super.emit();
        if (this._emitFun)
            this._emitFun();
    }
    getRandom(value) {
        return (Math.random() * 2 - 1) * value;
    }
    webGLEmit() {
        let pos = new Float32Array(3);
        pos[0] = this.getRandom(this._posRange[0]);
        pos[1] = this.getRandom(this._posRange[1]);
        pos[2] = this.getRandom(this._posRange[2]);
        let v = new Float32Array(3);
        v[0] = 0;
        v[1] = 0;
        v[2] = 0;
        this._particleTemplate.addParticleArray(pos, v);
    }
    get template() {
        return this._particleTemplate;
    }
    set template(template) {
        this._particleTemplate = template;
        if (!template) {
            this._emitFun = null;
            this.setting = null;
            this._posRange = null;
        }
        this.setting = template.settings;
        this._posRange = this.setting.positionVariance;
        if (this._particleTemplate instanceof ParticleTemplate2D_1.default) {
            this._emitFun = this.webGLEmit;
        }
        this.emissionRate = this.setting.emissionRate > 0 ? this.setting.emissionRate : 60;
    }
}
exports.default = Emitter2D;
},{"./EmitterBase":6,"./ParticleTemplate2D":12}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
*<code>EmitterBase</code> 类是粒子发射器类
*/
class EmitterBase {
    constructor() {
        /**
        *积累的帧时间
        */
        this._frameTime = 0;
        /**
         *粒子发射速率
         */
        this._emissionRate = 60;
        /**
         *当前剩余发射时间
         */
        this._emissionTime = 0;
        /**
         *发射粒子最小时间间隔
         */
        this.minEmissionTime = 1 / 60;
    }
    /**
     *开始发射粒子
     *@param duration 发射持续的时间(秒)
     */
    start(duration) {
        (duration === void 0) && (duration = Number.MAX_VALUE);
        if (this._emissionRate != 0)
            this._emissionTime = duration;
    }
    /**
    *停止发射粒子
    *@param clearParticles 是否清理当前的粒子
    */
    stop() {
        this._emissionTime = 0;
    }
    /**
     *清理当前的活跃粒子
     *@param clearTexture 是否清理贴图数据,若清除贴图数据将无法再播放
     */
    clear() {
        this._emissionTime = 0;
    }
    /**
    *发射一个粒子
    *
    */
    emit() {
    }
    /**
     *时钟前进
     *@param passedTime 前进时间
     *
     */
    advanceTime(passedTime) {
        (passedTime === void 0) && (passedTime = 1);
        this._emissionTime -= passedTime;
        if (this._emissionTime < 0)
            return;
        this._frameTime += passedTime;
        if (this._frameTime < this.minEmissionTime)
            return;
        while (this._frameTime > this.minEmissionTime) {
            this._frameTime -= this.minEmissionTime;
            this.emit();
        }
    }
    /**
     *设置粒子粒子模板
     *@param particleTemplate 粒子模板
     *
     */
    set particleTemplate(particleTemplate) {
        this._particleTemplate = particleTemplate;
    }
    /**
    *设置粒子发射速率
    *@param emissionRate 粒子发射速率 (个/秒)
    */
    set emissionRate(val) {
        if (val <= 0)
            return;
        this._emissionRate = val;
        (val > 0) && (this.minEmissionTime = 1 / val);
    }
    /**
    *获取粒子发射速率
    *@return 发射速率 粒子发射速率 (个/秒)
    */
    get emissionRate() {
        return this._emissionRate;
    }
}
exports.default = EmitterBase;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Render = Laya.Render;
var BlendMode = Laya.BlendMode;
var DrawParticleCmd = Laya.DrawParticleCmd;
const ParticleSetting_1 = require("./ParticleSetting");
const ParticleTemplate2D_1 = require("./ParticleTemplate2D");
const Emitter2D_1 = require("./Emitter2D");
class Particle2D extends Laya.Sprite {
    constructor(setting) {
        super();
        this._matrix4 = [
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ];
        /** 是否字段播放 */
        this.autoPlay = true;
        this.customRenderEnable = true;
        if (setting)
            this.setParticleSetting(setting);
    }
    /**
    *加载粒子文件
    *@param url 粒子文件地址
    */
    load(url) {
        Laya.loader.load(url, Laya.Handler.create(this, this.setParticleSetting), null, Laya.Loader.JSON);
    }
    /**
    *设置粒子配置数据
    *@param settings 粒子配置数据
    */
    setParticleSetting(setting) {
        if (!setting)
            return this.stop();
        ParticleSetting_1.default.checkSetting(setting);
        if (Render.isConchApp) {
            this._particleTemplate = new ParticleTemplate2D_1.default(setting);
            var sBlendMode = BlendMode.NAMES[setting.blendState];
            this.blendMode = sBlendMode;
            this.tempCmd = this.graphics._saveToCmd(null, DrawParticleCmd.create.call(this.graphics, this._particleTemplate));
            this._setGraphicsCallBack();
        }
        else {
            if (Render.isWebGL) {
                this.customRenderEnable = true;
                this._particleTemplate = new ParticleTemplate2D_1.default(setting);
                this.graphics._saveToCmd(null, DrawParticleCmd.create(this._particleTemplate));
            }
        }
        if (!this._emitter) {
            this._emitter = new Emitter2D_1.default(this._particleTemplate);
        }
        else {
            this._emitter.template = this._particleTemplate;
        }
        if (this.autoPlay) {
            this.emitter.start();
            this.play();
        }
    }
    /**
     *播放
     */
    play() {
        Laya.timer.frameLoop(1, this, this._loop);
    }
    /**
    *停止
    */
    stop() {
        Laya.timer.clear(this, this._loop);
    }
    _loop() {
        this.advanceTime(1 / 60);
    }
    /**
    *时钟前进
    *@param passedTime 时钟前进时间
    */
    advanceTime(passedTime) {
        (passedTime === void 0) && (passedTime = 1);
        if (this._emitter) {
            this._emitter.advanceTime(passedTime);
        }
    }
    customRender(context, x, y) {
        if (Render.isWebGL) {
            this._matrix4[0] = context._curMat.a;
            this._matrix4[1] = context._curMat.b;
            this._matrix4[4] = context._curMat.c;
            this._matrix4[5] = context._curMat.d;
            this._matrix4[12] = context._curMat.tx;
            this._matrix4[13] = context._curMat.ty;
            var sv = this._particleTemplate.sv;
            // TODO ZF
            sv["u_mmat"] = this._matrix4;
            // sv.mmat=this._matrix4;
        }
    }
    destroy(destroyChild) {
        (destroyChild === void 0) && (destroyChild = true);
        if ((this._particleTemplate instanceof ParticleTemplate2D_1.default)) {
            this._particleTemplate.dispose();
        }
        super.destroy(destroyChild);
    }
    /**
    *设置 粒子文件地址
    *@param path 粒子文件地址
    */
    set url(url) {
        this.load(url);
    }
    /**
    *获取粒子发射器
    */
    get emitter() {
        return this._emitter;
    }
}
exports.default = Particle2D;
window["Particle2D"] = Particle2D;
},{"./Emitter2D":5,"./ParticleSetting":9,"./ParticleTemplate2D":12}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MathUtil = Laya.MathUtil;
class ParticleData {
    constructor() {
    }
    static Create(settings, position, velocity, time) {
        var particleData = new ParticleData();
        particleData.position = position;
        //=====================
        // 设置速度 [x, y, z]
        //---------------------
        // 缩放 e = f * b;
        MathUtil.scaleVector3(velocity, settings.emitterVelocitySensitivity, ParticleData._tempVelocity);
        // 水平速度（单位：2D像素、3D坐标）
        var horizontalVelocity = MathUtil.lerp(settings.minHorizontalVelocity, settings.maxHorizontalVelocity, Math.random());
        // 水平角度
        var horizontalAngle = Math.random() * Math.PI * 2;
        // 水平速度
        ParticleData._tempVelocity[0] += horizontalVelocity * Math.cos(horizontalAngle);
        ParticleData._tempVelocity[2] += horizontalVelocity * Math.sin(horizontalAngle);
        // 垂直速度
        ParticleData._tempVelocity[1] += MathUtil.lerp(settings.minVerticalVelocity, settings.maxVerticalVelocity, Math.random());
        particleData.velocity = ParticleData._tempVelocity;
        //=====================
        // 设置颜色 [r, g, b, a]
        //---------------------
        particleData.startColor = ParticleData._tempStartColor;
        particleData.endColor = ParticleData._tempEndColor;
        var i = 0;
        if (settings.disableColor) {
            for (i = 0; i < 3; i++) {
                particleData.startColor[i] = 1;
                particleData.endColor[i] = 1;
            }
            // alpha
            particleData.startColor[i] = MathUtil.lerp(settings.minStartColor[i], settings.maxStartColor[i], Math.random());
            particleData.endColor[i] = MathUtil.lerp(settings.minEndColor[i], settings.maxEndColor[i], Math.random());
        }
        else {
            if (settings.colorComponentInter) {
                for (i = 0; i < 4; i++) {
                    particleData.startColor[i] = MathUtil.lerp(settings.minStartColor[i], settings.maxStartColor[i], Math.random());
                    particleData.endColor[i] = MathUtil.lerp(settings.minEndColor[i], settings.maxEndColor[i], Math.random());
                }
            }
            else {
                MathUtil.lerpVector4(settings.minStartColor, settings.maxStartColor, Math.random(), particleData.startColor);
                MathUtil.lerpVector4(settings.minEndColor, settings.maxEndColor, Math.random(), particleData.endColor);
            }
        }
        //=====================
        // 设置 大小和旋转速度 [startSize, endSize,  rotateSpeed]
        //---------------------
        particleData.sizeRotation = ParticleData._tempSizeRotation;
        var sizeRandom = Math.random();
        particleData.sizeRotation[0] = MathUtil.lerp(settings.minStartSize, settings.maxStartSize, sizeRandom);
        particleData.sizeRotation[1] = MathUtil.lerp(settings.minEndSize, settings.maxEndSize, sizeRandom);
        particleData.sizeRotation[2] = MathUtil.lerp(settings.minRotateSpeed, settings.maxRotateSpeed, Math.random());
        //=====================
        // 设置 半径 [StartRadius,EndRadius]
        //---------------------
        particleData.radius = ParticleData._tempRadius;
        var radiusRandom = Math.random();
        particleData.radius[0] = MathUtil.lerp(settings.minStartRadius, settings.maxStartRadius, radiusRandom);
        particleData.radius[1] = MathUtil.lerp(settings.minEndRadius, settings.maxEndRadius, radiusRandom);
        //=====================
        // 设置 弧度 [HorizontalStartRadian,VerticalStartRadian, HorizontalEndRadian, VerticalEndRadian]
        //---------------------
        particleData.radian = ParticleData._tempRadian;
        particleData.radian[0] = MathUtil.lerp(settings.minHorizontalStartRadian, settings.maxHorizontalStartRadian, Math.random());
        particleData.radian[1] = MathUtil.lerp(settings.minVerticalStartRadian, settings.maxVerticalStartRadian, Math.random());
        var useEndRadian = settings.useEndRadian;
        particleData.radian[2] = useEndRadian ? MathUtil.lerp(settings.minHorizontalEndRadian, settings.maxHorizontalEndRadian, Math.random()) : particleData.radian[0];
        particleData.radian[3] = useEndRadian ? MathUtil.lerp(settings.minVerticalEndRadian, settings.maxVerticalEndRadian, Math.random()) : particleData.radian[1];
        // 设置 缩放持续时间
        particleData.durationAddScale = settings.ageAddScale * Math.random();
        // 设置 次数
        particleData.time = time;
        return particleData;
    }
    static get _tempVelocity() {
        if (!this.___tempVelocity)
            this.___tempVelocity = new Float32Array(3);
        return this.___tempVelocity;
    }
    static get _tempStartColor() {
        if (!this.__tempStartColor)
            this.__tempStartColor = new Float32Array(4);
        return this.__tempStartColor;
    }
    static get _tempEndColor() {
        if (!this.__tempEndColor)
            this.__tempEndColor = new Float32Array(4);
        return this.__tempEndColor;
    }
    static get _tempSizeRotation() {
        if (!this.__tempSizeRotation)
            this.__tempSizeRotation = new Float32Array(3);
        return this.__tempSizeRotation;
    }
    static get _tempRadius() {
        if (!this.__tempRadius)
            this.__tempRadius = new Float32Array(2);
        return this.__tempRadius;
    }
    static get _tempRadian() {
        if (!this.__tempRadian)
            this.__tempRadian = new Float32Array(4);
        return this.__tempRadian;
    }
}
exports.default = ParticleData;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ParticleSetting {
    constructor() {
        /**贴图*/
        this.textureName = null;
        /**贴图个数,默认为1可不设置*/
        this.textureCount = 1;
        /**由于循环队列判断算法，最大饱和粒子数为maxPartices-1*/
        this.maxPartices = 100;
        /**粒子持续时间(单位:秒）*/
        this.duration = 1;
        /**如果大于0，某些粒子的持续时间会小于其他粒子,并具有随机性(单位:无）*/
        this.ageAddScale = 0;
        /**粒子受发射器速度的敏感度（需在自定义发射器中编码设置）*/
        this.emitterVelocitySensitivity = 1;
        /**最小开始尺寸（单位：2D像素、3D坐标）*/
        this.minStartSize = 100;
        /**最大开始尺寸（单位：2D像素、3D坐标）*/
        this.maxStartSize = 100;
        /**最小结束尺寸（单位：2D像素、3D坐标）*/
        this.minEndSize = 100;
        /**最大结束尺寸（单位：2D像素、3D坐标）*/
        this.maxEndSize = 100;
        /**最小水平速度（单位：2D像素、3D坐标）*/
        this.minHorizontalVelocity = 0;
        /**最大水平速度（单位：2D像素、3D坐标）*/
        this.maxHorizontalVelocity = 0;
        /**最小垂直速度（单位：2D像素、3D坐标）*/
        this.minVerticalVelocity = 0;
        /**最大垂直速度（单位：2D像素、3D坐标）*/
        this.maxVerticalVelocity = 0;
        /**等于1时粒子从出生到消亡保持一致的速度，等于0时粒子消亡时速度为0，大于1时粒子会保持加速（单位：无）*/
        this.endVelocity = 1;
        /**最小旋转速度（单位：2D弧度/秒、3D弧度/秒）*/
        this.minRotateSpeed = 0;
        /**最大旋转速度（单位：2D弧度/秒、3D弧度/秒）*/
        this.maxRotateSpeed = 0;
        /**最小开始半径（单位：2D像素、3D坐标）*/
        this.minStartRadius = 0;
        /**最大开始半径（单位：2D像素、3D坐标）*/
        this.maxStartRadius = 0;
        /**最小结束半径（单位：2D像素、3D坐标）*/
        this.minEndRadius = 0;
        /**最大结束半径（单位：2D像素、3D坐标）*/
        this.maxEndRadius = 0;
        /**最小水平开始弧度（单位：2D弧度、3D弧度）*/
        this.minHorizontalStartRadian = 0;
        /**最大水平开始弧度（单位：2D弧度、3D弧度）*/
        this.maxHorizontalStartRadian = 0;
        /**最小垂直开始弧度（单位：2D弧度、3D弧度）*/
        this.minVerticalStartRadian = 0;
        /**最大垂直开始弧度（单位：2D弧度、3D弧度）*/
        this.maxVerticalStartRadian = 0;
        /**是否使用结束弧度,false为结束时与起始弧度保持一致,true为根据minHorizontalEndRadian、maxHorizontalEndRadian、minVerticalEndRadian、maxVerticalEndRadian计算结束弧度。*/
        this.useEndRadian = true;
        /**最小水平结束弧度（单位：2D弧度、3D弧度）*/
        this.minHorizontalEndRadian = 0;
        /**最大水平结束弧度（单位：2D弧度、3D弧度）*/
        this.maxHorizontalEndRadian = 0;
        /**最小垂直结束弧度（单位：2D弧度、3D弧度）*/
        this.minVerticalEndRadian = 0;
        /**最大垂直结束弧度（单位：2D弧度、3D弧度）*/
        this.maxVerticalEndRadian = 0;
        /**false代表RGBA整体插值，true代表RGBA逐分量插值*/
        this.colorComponentInter = false;
        /**false代表使用参数颜色数据，true代表使用原图颜色数据*/
        this.disableColor = false;
        /**混合模式，待调整，引擎中暂无BlendState抽象*/
        this.blendState = 0;
        /**发射器类型,"point","box","sphere","ring"*/
        this.emitterType = "null";
        /**发射器发射速率*/
        this.emissionRate = 10;
        /**球发射器半径*/
        this.sphereEmitterRadius = 1;
        /**球发射器速度*/
        this.sphereEmitterVelocity = 0;
        /**球发射器速度随机值*/
        this.sphereEmitterVelocityAddVariance = 0;
        /**环发射器半径*/
        this.ringEmitterRadius = 30;
        /**环发射器速度*/
        this.ringEmitterVelocity = 0;
        /**环发射器速度随机值*/
        this.ringEmitterVelocityAddVariance = 0;
        /**环发射器up向量，0代表X轴,1代表Y轴,2代表Z轴*/
        this.ringEmitterUp = 2;
        this.gravity = new Float32Array([0, 0, 0]);
        this.minStartColor = new Float32Array([1, 1, 1, 1]);
        this.maxStartColor = new Float32Array([1, 1, 1, 1]);
        this.minEndColor = new Float32Array([1, 1, 1, 1]);
        this.maxEndColor = new Float32Array([1, 1, 1, 1]);
        this.pointEmitterPosition = new Float32Array([0, 0, 0]);
        this.pointEmitterPositionVariance = new Float32Array([0, 0, 0]);
        this.pointEmitterVelocity = new Float32Array([0, 0, 0]);
        this.pointEmitterVelocityAddVariance = new Float32Array([0, 0, 0]);
        this.boxEmitterCenterPosition = new Float32Array([0, 0, 0]);
        this.boxEmitterSize = new Float32Array([0, 0, 0]);
        this.boxEmitterVelocity = new Float32Array([0, 0, 0]);
        this.boxEmitterVelocityAddVariance = new Float32Array([0, 0, 0]);
        this.sphereEmitterCenterPosition = new Float32Array([0, 0, 0]);
        this.ringEmitterCenterPosition = new Float32Array([0, 0, 0]);
        this.positionVariance = new Float32Array([0, 0, 0]);
    }
    static get defaultSetting() {
        if (!this._defaultSetting)
            this._defaultSetting = new ParticleSetting();
        return this._defaultSetting;
    }
    static checkSetting(setting) {
        let key;
        for (key in ParticleSetting.defaultSetting) {
            if (!setting.hasOwnProperty(key)) {
                setting[key] = ParticleSetting.defaultSetting[key];
            }
        }
        setting.endVelocity = +setting.endVelocity;
        setting.gravity[0] = +setting.gravity[0];
        setting.gravity[1] = +setting.gravity[1];
        setting.gravity[2] = +setting.gravity[2];
    }
}
exports.default = ParticleSetting;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Game_1 = require("../Game");
class ParticleShader extends Laya.Shader {
    constructor() {
        let vs = ParticleShader.vs;
        let ps = ParticleShader.ps;
        super(vs, ps, ParticleShader.shaderName + "2", // saveName
        null, // nameMap
        // bindAttrib
        [
            'a_CornerTextureCoordinate', 0,
            'a_Position', 1,
            'a_Velocity', 2,
            'a_StartColor', 3,
            'a_EndColor', 4,
            'a_SizeRotation', 5,
            'a_Radius', 6,
            'a_Radian', 7,
            'a_AgeAddScale', 8,
            'a_Time', 9
        ]);
    }
    /**
     * 加载Shader
     */
    static install() {
        return __awaiter(this, void 0, void 0, function* () {
            this.vs = yield Game_1.default.asset.loadShaderVSAsync(this.shaderName);
            this.ps = yield Game_1.default.asset.loadShaderPSAsync(this.shaderName);
        });
    }
}
ParticleShader.shaderName = "ParticleShader";
exports.default = ParticleShader;
},{"../Game":2}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RenderState2D = Laya.RenderState2D;
const ParticleShader_1 = require("./ParticleShader");
class ParticleShaderValue extends Laya.Value2D {
    constructor() {
        super(0, 0);
        /*
        public var a_CornerTextureCoordinate:Array=[4,WebGLContext.FLOAT,false,116,0];
        public var a_Position:Array=[3,WebGLContext.FLOAT,false,116,16];
        public var a_Velocity:Array=[3,WebGLContext.FLOAT,false,116,28];
        public var a_StartColor:Array=[4,WebGLContext.FLOAT,false,116,40];
        public var a_EndColor:Array=[4,WebGLContext.FLOAT,false,116,56];
        public var a_SizeRotation:Array=[3,WebGLContext.FLOAT,false,116,72];
        public var a_Radius:Array=[2,WebGLContext.FLOAT,false,116,84];
        public var a_Radian:Array=[4,WebGLContext.FLOAT,false,116,92];
        public var a_AgeAddScale:Array=[1,WebGLContext.FLOAT,false,116,108];
        public var a_Time:Array=[1,WebGLContext.FLOAT,false,116,112];
        */
        this.u_CurrentTime = NaN;
        this.u_Duration = NaN;
        this.u_Gravity = null;
        //v3
        this.u_EndVelocity = NaN;
        this.u_texture = null;
    }
    /*
    this._attribLocation=[
            'a_CornerTextureCoordinate',0,
            'a_Position',1,
            'a_Velocity',2,
            'a_StartColor',3,
            'a_EndColor',4,
            'a_SizeRotation',5,
            'a_Radius',6,
            'a_Radian',7,
            'a_AgeAddScale',8,
            'a_Time',9
        ];
    */
    upload() {
        var size = this.size;
        size[0] = RenderState2D.width;
        size[1] = RenderState2D.height;
        this.alpha = this.ALPHA * RenderState2D.worldAlpha;
        ParticleShaderValue.pShader.upload(this);
    }
    static get pShader() {
        if (!this._pShader)
            this._pShader = new ParticleShader_1.default();
        return this._pShader;
    }
}
exports.default = ParticleShaderValue;
},{"./ParticleShader":10}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ParticleTemplateWebGL_1 = require("./ParticleTemplateWebGL");
const ParticleShaderValue_1 = require("./ParticleShaderValue");
var Handler = Laya.Handler;
var BlendMode = Laya.BlendMode;
var Render = Laya.Render;
var MeshParticle2D = Laya.MeshParticle2D;
var WebGL = Laya.WebGL;
var WebGLContext = Laya.WebGLContext;
var Stat = Laya.Stat;
class ParticleTemplate2D extends ParticleTemplateWebGL_1.default {
    constructor(parSetting) {
        super(parSetting);
        this.x = 0;
        this.y = 0;
        this._blendFn = null;
        this._startTime = 0;
        this._key = {};
        this.sv = new ParticleShaderValue_1.default();
        Laya.loader.load(this.settings.textureName, Handler.create(null, (texture) => {
            this.texture = texture;
        }));
        this.sv.u_Duration = this.settings.duration;
        this.sv.u_Gravity = this.settings.gravity;
        this.sv.u_EndVelocity = this.settings.endVelocity;
        this._blendFn = BlendMode.fns[parSetting.blendState];
        if (Render.isConchApp) {
            var nSize = MeshParticle2D.const_stride * this.settings.maxPartices * 4 * 4;
            this._conchMesh = /*__JS__ */ new ParamData(nSize, true);
        }
        else {
            this._mesh = MeshParticle2D.getAMesh(this.settings.maxPartices);
        }
        this.initialize();
    }
    getRenderType() {
        return -111;
    }
    releaseRender() {
    }
    addParticleArray(position, velocity) {
        position[0] += this.x;
        position[1] += this.y;
        super.addParticleArray(position, velocity);
    }
    addNewParticlesToVertexBuffer() {
        var _vertexBuffer2D = this._mesh._vb;
        _vertexBuffer2D.clear();
        _vertexBuffer2D.append(this._vertices);
        var start = 0;
        if (this._firstNewElement < this._firstFreeElement) {
            start = this._firstNewElement * 4 * this._floatCountPerVertex * 4;
            _vertexBuffer2D.subUpload(start, start, start + (this._firstFreeElement - this._firstNewElement) * 4 * this._floatCountPerVertex * 4);
        }
        else {
            start = this._firstNewElement * 4 * this._floatCountPerVertex * 4;
            _vertexBuffer2D.subUpload(start, start, start + (this.settings.maxPartices - this._firstNewElement) * 4 * this._floatCountPerVertex * 4);
            if (this._firstFreeElement > 0) {
                _vertexBuffer2D.setNeedUpload();
                _vertexBuffer2D.subUpload(0, 0, this._firstFreeElement * 4 * this._floatCountPerVertex * 4);
            }
        }
        this._firstNewElement = this._firstFreeElement;
    }
    renderSubmit() {
        if (this.texture && this.texture.getIsReady()) {
            this.update(Laya.timer._delta);
            this.sv.u_CurrentTime = this._currentTime;
            if (this._firstNewElement != this._firstFreeElement) {
                this.addNewParticlesToVertexBuffer();
            }
            this.blend();
            if (this._firstActiveElement != this._firstFreeElement) {
                var gl = WebGL.mainContext;
                this._mesh.useMesh(gl);
                this.sv.u_texture = this.texture._getSource();
                this.sv.upload();
                if (this._firstActiveElement < this._firstFreeElement) {
                    WebGL.mainContext.drawElements(WebGLContext.TRIANGLES, (this._firstFreeElement - this._firstActiveElement) * 6, WebGLContext.UNSIGNED_SHORT, this._firstActiveElement * 6 * 2);
                }
                else {
                    WebGL.mainContext.drawElements(WebGLContext.TRIANGLES, (this.settings.maxPartices - this._firstActiveElement) * 6, WebGLContext.UNSIGNED_SHORT, this._firstActiveElement * 6 * 2);
                    if (this._firstFreeElement > 0)
                        WebGL.mainContext.drawElements(WebGLContext.TRIANGLES, this._firstFreeElement * 6, WebGLContext.UNSIGNED_SHORT, 0);
                }
                !Stat["drawCall"] ? Stat["drawCall"] = 1 : Stat["drawCall"]++;
            }
            this._drawCounter++;
        }
        return 1;
    }
    updateParticleForNative() {
        if (this.texture && this.texture.getIsReady()) {
            this.update(Laya.timer._delta);
            this.sv.u_CurrentTime = this._currentTime;
            if (this._firstNewElement != this._firstFreeElement) {
                this._firstNewElement = this._firstFreeElement;
            }
        }
    }
    getMesh() {
        return this._mesh;
    }
    getConchMesh() {
        return this._conchMesh;
    }
    getFirstNewElement() {
        return this._firstNewElement;
    }
    getFirstFreeElement() {
        return this._firstFreeElement;
    }
    getFirstActiveElement() {
        return this._firstActiveElement;
    }
    getFirstRetiredElement() {
        return this._firstRetiredElement;
    }
    setFirstFreeElement(_value) {
        this._firstFreeElement = _value;
    }
    setFirstNewElement(_value) {
        this._firstNewElement = _value;
    }
    addDrawCounter() {
        this._drawCounter++;
    }
    blend() {
        if (BlendMode.activeBlendFunction !== this._blendFn) {
            var gl = WebGL.mainContext;
            gl.enable(WebGLContext.BLEND);
            this._blendFn(gl);
            BlendMode.activeBlendFunction = this._blendFn;
        }
    }
    dispose() {
        if (!Render.isConchApp) {
            this._mesh.releaseMesh();
        }
    }
}
ParticleTemplate2D.activeBlendType = -1;
exports.default = ParticleTemplate2D;
},{"./ParticleShaderValue":11,"./ParticleTemplateWebGL":14}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ParticleTemplateBase {
    constructor() {
        /**
        *粒子配置数据
        */
        this.settings = null;
        /**
        *粒子贴图
        */
        this.texture = null;
    }
    /**
     *添加一个粒子
     *@param position 粒子位置
     *@param velocity 粒子速度
     *
     */
    addParticleArray(position, velocity) {
    }
}
exports.default = ParticleTemplateBase;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Render = Laya.Render;
var MeshParticle2D = Laya.MeshParticle2D;
const ParticleTemplateBase_1 = require("./ParticleTemplateBase");
const ParticleData_1 = require("./ParticleData");
class ParticleTemplateWebGL extends ParticleTemplateBase_1.default {
    constructor(setting) {
        super();
        this._floatCountPerVertex = 29;
        //0~3为CornerTextureCoordinate,
        //4~6为Position,
        //7~9Velocity,
        //10到13为StartColor,
        //14到17为EndColor,
        //18到20位SizeRotation，
        //21到22位Radius,
        //23到26位Radian，
        //27为DurationAddScaleShaderValue,
        //28为Time
        this._firstActiveElement = 0;
        this._firstNewElement = 0;
        this._firstFreeElement = 0;
        this._firstRetiredElement = 0;
        this._currentTime = 0;
        this._drawCounter = 0;
        this.settings = setting;
    }
    reUse(context, pos) {
        return 0;
    }
    /** 初始化 */
    initialize() {
        var floatStride = 0;
        if (Render.isConchApp) {
            this._vertices = this._conchMesh._float32Data;
            floatStride = MeshParticle2D.const_stride / 4;
        }
        else {
            this._vertices = this._mesh._vb.getFloat32Array();
            floatStride = this._mesh._stride / 4;
        }
        ;
        var bufi = 0;
        var bufStart = 0;
        for (var i = 0; i < this.settings.maxPartices; i++) {
            var random = Math.random();
            var cornerYSegement = this.settings.textureCount ? 1.0 / this.settings.textureCount : 1.0;
            var cornerY = NaN;
            for (cornerY = 0; cornerY < this.settings.textureCount; cornerY += cornerYSegement) {
                if (random < cornerY + cornerYSegement)
                    break;
            }
            this._vertices[bufi++] = -1;
            this._vertices[bufi++] = -1;
            this._vertices[bufi++] = 0;
            this._vertices[bufi++] = cornerY;
            bufi = (bufStart += floatStride);
            this._vertices[bufi++] = 1;
            this._vertices[bufi++] = -1;
            this._vertices[bufi++] = 1;
            this._vertices[bufi++] = cornerY;
            bufi = bufStart += floatStride;
            this._vertices[bufi++] = 1;
            this._vertices[bufi++] = 1;
            this._vertices[bufi++] = 1;
            this._vertices[bufi++] = cornerY + cornerYSegement;
            bufi = bufStart += floatStride;
            this._vertices[bufi++] = -1;
            this._vertices[bufi++] = 1;
            this._vertices[bufi++] = 0;
            this._vertices[bufi++] = cornerY + cornerYSegement;
            bufi = bufStart += floatStride;
        }
    }
    update(elapsedTime) {
        this._currentTime += elapsedTime / 1000;
        this.retireActiveParticles();
        this.freeRetiredParticles();
        if (this._firstActiveElement == this._firstFreeElement)
            this._currentTime = 0;
        if (this._firstRetiredElement == this._firstActiveElement)
            this._drawCounter = 0;
    }
    /** 注销活动粒子 */
    retireActiveParticles() {
        var epsilon = 0.0001;
        var particleDuration = this.settings.duration;
        while (this._firstActiveElement != this._firstNewElement) {
            var offset = this._firstActiveElement * this._floatCountPerVertex * 4;
            var index = offset + 28;
            var particleAge = this._currentTime - this._vertices[index];
            particleAge *= (1.0 + this._vertices[offset + 27]);
            if (particleAge + epsilon < particleDuration)
                break;
            this._vertices[index] = this._drawCounter;
            this._firstActiveElement++;
            if (this._firstActiveElement >= this.settings.maxPartices)
                this._firstActiveElement = 0;
        }
    }
    /** 注销自由粒子 */
    freeRetiredParticles() {
        while (this._firstRetiredElement != this._firstActiveElement) {
            var age = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * 4 + 28];
            if (age < 3)
                break;
            this._firstRetiredElement++;
            if (this._firstRetiredElement >= this.settings.maxPartices)
                this._firstRetiredElement = 0;
        }
    }
    addNewParticlesToVertexBuffer() {
    }
    //由于循环队列判断算法，
    //当下一个freeParticle等于retiredParticle时不添加例子，意味循环队列中永远有一个空位。
    //（由于此判断算法快速、简单，所以放弃了使循环队列饱和的复杂算法（需判断freeParticle在retiredParticle前、后两种情况并不同处理））
    addParticleArray(position, velocity) {
        var nextFreeParticle = this._firstFreeElement + 1;
        if (nextFreeParticle >= this.settings.maxPartices)
            nextFreeParticle = 0;
        if (nextFreeParticle === this._firstRetiredElement)
            return;
        var particleData = ParticleData_1.default.Create(this.settings, position, velocity, this._currentTime);
        var startIndex = this._firstFreeElement * this._floatCountPerVertex * 4;
        for (var i = 0; i < 4; i++) {
            var j = 0, offset = 0;
            for (j = 0, offset = 4; j < 3; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.position[j];
            for (j = 0, offset = 7; j < 3; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.velocity[j];
            for (j = 0, offset = 10; j < 4; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.startColor[j];
            for (j = 0, offset = 14; j < 4; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.endColor[j];
            for (j = 0, offset = 18; j < 3; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.sizeRotation[j];
            for (j = 0, offset = 21; j < 2; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.radius[j];
            for (j = 0, offset = 23; j < 4; j++)
                this._vertices[startIndex + i * this._floatCountPerVertex + offset + j] = particleData.radian[j];
            this._vertices[startIndex + i * this._floatCountPerVertex + 27] = particleData.durationAddScale;
            this._vertices[startIndex + i * this._floatCountPerVertex + 28] = particleData.time;
        }
        this._firstFreeElement = nextFreeParticle;
    }
}
exports.default = ParticleTemplateWebGL;
},{"./ParticleData":8,"./ParticleTemplateBase":13}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 子弹脚本，实现子弹飞行逻辑及对象池回收机制
 */
class Bullet extends Laya.Script {
    constructor() { super(); }
    onEnable() {
        //设置初始速度
        var rig = this.owner.getComponent(Laya.RigidBody);
        rig.setVelocity({ x: 0, y: -10 });
    }
    onTriggerEnter(other, self, contact) {
        //如果被碰到，则移除子弹
        this.owner.removeSelf();
    }
    onUpdate() {
        //如果子弹超出屏幕，则移除子弹
        if (this.owner.y < -10) {
            this.owner.removeSelf();
        }
    }
    onDisable() {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("bullet", this.owner);
    }
}
exports.default = Bullet;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameUI_1 = require("./GameUI");
/**
 * 掉落盒子脚本，实现盒子碰撞及回收流程
 */
class DropBox extends Laya.Script {
    constructor() {
        super();
        /**盒子等级 */
        this.level = 1;
    }
    onEnable() {
        /**获得组件引用，避免每次获取组件带来不必要的查询开销 */
        this._rig = this.owner.getComponent(Laya.RigidBody);
        this.level = Math.round(Math.random() * 5) + 1;
        this._text = this.owner.getChildByName("levelTxt");
        this._text.text = this.level + "";
    }
    onUpdate() {
        //让持续盒子旋转
        this.owner.rotation++;
    }
    onTriggerEnter(other, self, contact) {
        var owner = this.owner;
        if (other.label === "buttle") {
            //碰撞到子弹后，增加积分，播放声音特效
            if (this.level > 1) {
                this.level--;
                this._text.changeText(this.level + "");
                owner.getComponent(Laya.RigidBody).setVelocity({ x: 0, y: -10 });
                Laya.SoundManager.playSound("sound/hit.wav");
            }
            else {
                if (owner.parent) {
                    let effect = Laya.Pool.getItemByCreateFun("effect", this.createEffect, this);
                    effect.pos(owner.x, owner.y);
                    owner.parent.addChild(effect);
                    effect.play(0, true);
                    owner.removeSelf();
                    Laya.SoundManager.playSound("sound/destroy.wav");
                }
            }
            GameUI_1.default.instance.addScore(1);
        }
        else if (other.label === "ground") {
            //只要有一个盒子碰到地板，则停止游戏
            owner.removeSelf();
            GameUI_1.default.instance.stopGame();
        }
    }
    /**使用对象池创建爆炸动画 */
    createEffect() {
        let ani = new Laya.Animation();
        ani.loadAnimation("test/TestAni.ani");
        ani.on(Laya.Event.COMPLETE, null, recover);
        function recover() {
            ani.removeSelf();
            Laya.Pool.recover("effect", ani);
        }
        return ani;
    }
    onDisable() {
        //盒子被移除时，回收盒子到对象池，方便下次复用，减少对象创建开销。
        Laya.Pool.recover("dropBox", this.owner);
    }
}
exports.default = DropBox;
},{"./GameUI":18}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 游戏控制脚本。定义了几个dropBox，bullet，createBoxInterval等变量，能够在IDE显示及设置该变量
 * 更多类型定义，请参考官方文档
 */
class GameControl extends Laya.Script {
    constructor() {
        super();
        /** @prop {name:createBoxInterval,tips:"间隔多少毫秒创建一个下跌的容器",type:int,default:1000}*/
        this.createBoxInterval = 1000;
        /**开始时间*/
        this._time = 0;
        /**是否已经开始游戏 */
        this._started = false;
    }
    onEnable() {
        this._time = Date.now();
        this._gameBox = this.owner.getChildByName("gameBox");
        this.createBox();
    }
    onUpdate() {
        //每间隔一段时间创建一个盒子
        let now = Date.now();
        if (now - this._time > this.createBoxInterval) {
            this._time = now;
            this.createBox();
        }
    }
    createBox() {
        //使用对象池创建盒子
        let box = Laya.Pool.getItemByCreateFun("dropBox", this.dropBox.create, this.dropBox);
        box.pos(Math.random() * (Laya.stage.width - 100), -100);
        this._gameBox.addChild(box);
    }
    onStageClick(e) {
        //停止事件冒泡，提高性能，当然也可以不要
        e.stopPropagation();
        //舞台被点击后，使用对象池创建子弹
        let flyer = Laya.Pool.getItemByCreateFun("bullet", this.bullet.create, this.bullet);
        flyer.pos(Laya.stage.mouseX, Laya.stage.mouseY);
        this._gameBox.addChild(flyer);
    }
    /**开始游戏，通过激活本脚本方式开始游戏*/
    startGame() {
        if (!this._started) {
            this._started = true;
            this.enabled = true;
        }
    }
    /**结束游戏，通过非激活本脚本停止游戏 */
    stopGame() {
        this._started = false;
        this.enabled = false;
        this.createBoxInterval = 1000;
        this._gameBox.removeChildren();
    }
}
exports.default = GameControl;
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("./../ui/layaMaxUI");
const GameControl_1 = require("./GameControl");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
class GameUI extends layaMaxUI_1.ui.test.TestSceneUI {
    constructor() {
        super();
        GameUI.instance = this;
        //关闭多点触控，否则就无敌了
        Laya.MouseManager.multiTouchEnabled = false;
    }
    onEnable() {
        this._control = this.getComponent(GameControl_1.default);
        //点击提示文字，开始游戏
        this.tipLbll.on(Laya.Event.CLICK, this, this.onTipClick);
    }
    onTipClick(e) {
        this.tipLbll.visible = false;
        this._score = 0;
        this.scoreLbl.text = "";
        this._control.startGame();
    }
    /**增加分数 */
    addScore(value = 1) {
        this._score += value;
        this.scoreLbl.changeText("分数：" + this._score);
        //随着分数越高，难度增大
        if (this._control.createBoxInterval > 600 && this._score % 20 == 0)
            this._control.createBoxInterval -= 20;
    }
    /**停止游戏 */
    stopGame() {
        this.tipLbll.visible = true;
        this.tipLbll.text = "游戏结束了，点击屏幕重新开始";
        this._control.stopGame();
    }
}
exports.default = GameUI;
},{"./../ui/layaMaxUI":19,"./GameControl":17}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ui;
(function (ui) {
    var test;
    (function (test) {
        class TestSceneUI extends Laya.Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("test/TestScene");
            }
        }
        test.TestSceneUI = TestSceneUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
